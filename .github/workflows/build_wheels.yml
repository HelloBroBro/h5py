---
name: Build
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true

# Adapted from https://github.com/matplotlib/matplotlib/blob/main/.github/workflows/nightlies.yml
# and https://cibuildwheel.pypa.io/en/stable/setup/#github-actions

on:
  # Run daily at 1:23 UTC to upload nightly wheels to Anaconda Cloud
  schedule:
    - cron: '23 1 * * *'
  # Run on demand with workflow dispatch
  workflow_dispatch:
  # Run on all PRs
  pull_request:
  # Run on tags
  push:
    branches:
      - master
    tags:
      - '*'

permissions:
  actions: read
  contents: write

jobs:
  build_wheels:
    name: 'Wheels: ${{ matrix.os }} ${{ matrix.arch }}'
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: aarch64
          - os: windows-latest
            arch: AMD64
          - os: macos-14
            arch: arm64
          - os: macos-13
            arch: x86_64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # get the non-merge commit for PRs

      # Get HDF5 outside of cibuildwheel so that we can cache the result

      # Cache HDF5
      - name: Cache built HDF5
        uses: actions/cache@v4
        with:
          key: ${{ matrix.os }}-${{ matrix.arch }}-3  # -${{ hashFiles('**/pyproject.toml') }
          path: cache/hdf5

      # Windows HDF5
      - uses: nuget/setup-nuget@v2
        if: runner.os == 'Windows'
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
        if: runner.os == 'Windows'
      - name: Get HDF5 on Windows
        run: bash ./ci/cibw_before_all_windows.sh "${{ github.workspace }}"
        if: runner.os == 'Windows'

      # macOS HDF5
      - name: Get HDF5 on macOS
        run: bash ./ci/cibw_before_all_macos.sh "${{ github.workspace }}"
        if: runner.os == 'macOS'
      # Hack for 3.8 bug (https://github.com/pypa/cibuildwheel/pull/1871#issuecomment-2161613619)
      - uses: actions/setup-python@v5
        with:
          python-version: 3.8
        if: runner.os == 'macOS' && matrix.arch == 'arm64'

      # Linux emulation for aarch64 support
      # https://cibuildwheel.pypa.io/en/stable/faq/#emulation
      - uses: docker/setup-qemu-action@v3
        with:
          platforms: all
        if: runner.os == 'Linux' && matrix.arch == 'aarch64'

      # Triage build
      - name: Triage CIBW_BUILD and NumPy pip-pre
        shell: bash
        id: triage
        run: |
          set -eo pipefail
          MSG="$(git show -s --format=%s ${{ github.event.pull_request.head.sha || github.sha }})"
          KIND="${{ matrix.os }} ${{ matrix.arch }}"
          # If it's a PR, and aarch64 architecture, and no [aarch64] in the commit message, just build and test one aarch64 wheel with one tox config
          if [[ "${{ matrix.arch }}" == "aarch64" ]] && [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "$MSG" != *'[aarch64]'* ]]; then
            echo "Building limited $KIND wheels for PR with commit message: $MSG"
            CIBW_BUILD="cp312-*_${{ matrix.arch }}"
            echo "TOX_TEST_LIMITED=1" >> $GITHUB_ENV
          else
            echo "Building full $KIND wheels on event_name=${{ github.event_name }} with commit message: $MSG"
            CIBW_BUILD="*_${{ matrix.arch }}"
          fi
          echo "CIBW_BUILD=$CIBW_BUILD"
          echo "CIBW_BUILD=$CIBW_BUILD" >> $GITHUB_ENV
          CIBW_SKIP="pp* *musllinux*"
          # If it's a scheduled build or [pip-pre] in commit message, use pip-pre
          if [[ "${{ github.event_name}}" == "schedule" ]] || [[ "$MSG" = *'[pip-pre]'* ]]; then
            echo "Using NumPy pip-pre wheel for wheel building"
            echo "pip-pre=1" >> $GITHUB_OUTPUT
            # No Python 3.9 or 3.10 on scientific-python-nightly-wheels
            CIBW_SKIP="$CIBW_SKIP cp38-* cp39-*"
          fi
          echo "CIBW_SKIP=$CIBW_SKIP"
          echo "CIBW_SKIP=$CIBW_SKIP" >> $GITHUB_ENV

      - name: Install scientific-python-nightly NumPy
        shell: bash
        run: |
          set -eo pipefail
          echo "CIBW_BEFORE_BUILD=pip install --pre --only-binary numpy --extra-index-url https://pypi.anaconda.org/scientific-python-nightly-wheels/simple \"numpy>=2.1.0.dev0\" \"Cython>=0.29.31,<4\" pkgconfig \"setuptools>=61\" wheel" >> $GITHUB_ENV
          echo "CIBW_BUILD_FRONTEND=pip; args: --no-build-isolation" >> $GITHUB_ENV
        if: steps.triage.outputs.pip-pre == '1'

      # Now actually build the wheels
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.0
        env:
          # Note that tool.cibuildwheel "skip" in pyproject.toml also limits what gets built
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ env.CIBW_BUILD }}
          CIBW_SKIP: ${{ env.CIBW_SKIP }}
          CIBW_BEFORE_BUILD: ${{ env.CIBW_BEFORE_BUILD }}
          CIBW_BUILD_FRONTEND: ${{ env.CIBW_BUILD_FRONTEND }}
          TOX_TEST_LIMITED: ${{ env.TOX_TEST_LIMITED }}

      # And upload the results
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  upload_wheels:
    name: Upload wheels
    needs: build_wheels
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: dist
      - run: pwd && ls -alt . && ls -alt dist/
      # If it's a PR, do nothing else.
      # If it's a scheduled run, it was built with nightly NumPy, push to scientific-python:
      - name: Upload wheels to Anaconda Cloud as nightlies
        uses: scientific-python/upload-nightly-action@b67d7fcc0396e1128a474d1ab2b48aa94680f9fc # 0.5.0
        with:
          artifacts_path: dist
          anaconda_nightly_upload_token: ${{ secrets.ANACONDA_ORG_UPLOAD_TOKEN }}
        if: github.repository_owner == 'h5py' && github.event_name == 'schedule'
      # If it's a push to master, create a draft release;
      # If it's a tag, publish it to the existing release:
      - name: Upload to GitHub releases
        uses: softprops/action-gh-release@v2
        with:
          draft: ${{ github.ref_type != 'tag' }}
          files: |
            dist/*.whl
        if: github.repository_owner == 'h5py' && github.event_name == 'push'
